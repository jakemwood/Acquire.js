// XMLTypeChecker
// ==============
// This file creates an "XMLTypeChecker" module which can be imported
// into other node.js scripts and instantiated.
//
// The purpose of this module is to verify that an object generated by
// xml2js actually matches one of our declared data types.
//
// THIS MODULE DOES NOT CHECK FOR VALID DATA, ONLY VALID OBJECT STRUCTURE.
// For example, this module will validate a properly-formed hotel called
// "Best Western," even though "Best Western" is an invalid hotel name
// in the game.  The Hotel class is responsible for verifying hotel names.
//
// See "Data Types.txt" for common data types.
//
// Example of code that might appear in acquire.js:
//
//	var XMLTypes = require('./XMLTypeChecker.js');
//  ...
module.exports = {
	
	// [public] BoardXML: Object -> Boolean
	// Verifies whether the provided object meets the criteria to
	// be a BoardXML piece.
	BoardXML: function(xml) {
		var keys = Object.keys(xml);
		for (var i in keys) {
			if (keys[i] != 'tile' && keys[i] != 'hotel') {
				return false;
			}
		}
		return true;
	},
	
	// [public] TileXML: Object -> Boolean
	// Verifies whether the provided object meets the criteria to
	// be a TileXML piece.
	TileXML: function(xml) {
		var keys = Object.keys(xml);
		if (keys.length == 1 && keys[0] == '$') {
			keys = Object.keys(xml.$);
			if (keys.length == 2) {
				if (xml.$.row && xml.$.column) {
					return (xml.$.row >= 'A' && xml.$.row <= 'I' &&
							xml.$.column >= 1 && xml.$.column <= 12);
				}
				else {
					return false;
				}
			}
			else {
				return false;
			}
		}
		else {
			return false;
		}
	},
	
	// [public] HotelXML: Object -> Boolean
	// Verifies whether the provided object meets the criteria to
	// be a HotelXML piece.
	HotelXML: function(xml) {
		var keys = Object.keys(xml);
		for (var i in keys) {
			if (keys[i] == '$') {
				var attrkeys = Object.keys(xml.$);
				if (attrkeys.length != 1) {
					return false;
				}
				if (attrkeys[0] != 'label') {
					return false;	
				}
			}
			else if (keys[i] == 'tile') {
				// Check everything in here to verify it's a valid TileXML
				for (var t in xml.tile) {
					if (!module.exports.TileXML(xml.tile[t])) {
						return false;
					}
				}
			}
			else {
				return false;
			}
		}
		return true;
	}
};