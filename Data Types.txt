********************************************************************************
**
**	A C Q U I R E . J S
**
**  Data Types
**
********************************************************************************

Color is a String, either:
	* red
	* blue
	* green
	* yellow
	* purple
	* brown
	* orange

HotelName is a String, either:
	* American
	* Continental
	* Festival
	* Imperial
	* Sackson
	* Tower
	* Worldwide
	
Tile is an Object:
	{ row, column }
where row is a number from A to I (inclusive)
where column is a letter from 1 to 12 (inclusive)

Pieces is an Array of Tile

Board is a Javascript object created from the Board module

Hotel is a Javascript object created from the Hotel module

## XMLResults

XMLResults are an Object.  Unfortunately, XMLResults do not have a standard
design to them, as they are a representation of XML data.  However, they do
follow a standard pattern.

Consider the following XML:

<board>
	<tile row="A" column="1" />
</board>

This XML will produce the following Object:
	{
		board: {
			tile: [ {
				$: {
					row: "A",
					column: "1"
				}
			} ]
		}
	}

As you can see, the first and only element in the Object is called "board," which
is the root element in our example XML.

Within the "board" member, there is an additional member called "tile."  This member
will contain *all* the instances of a "tile" tag within the "board" tag.

Each "tile" tag then contains a $ member, which contains the attributes associated
with that tile.

Here's another example:

<query row="A" column="1">
	<board>
		<tile row="A" column="1" />
		<tile row="A" column="2" />
	</board>
</query>

This will produce:
	{
		query: {
			$: {
				row: "A",
				column: "1"
			},
			board:  [ {
				tile: [ { 
					row: "A",
					column: "1"
				}, {
					row: "A",
					column: "B"
				} ]
			} ]
		}
	}
	
Obviously, XMLResults are not very concrete data types we can rely on using
throughout the application.  That said, we've standardized some of the data
types, which are defined below.

A TileXML is an Object with the following structure:
	{
		$: {
			column : String representation of a number between 1 and 12, inclusive
			row : String, with one letter "A" to "I", inclusive
		}
	}


A HotelXML is an Object with the following structure:
	{
		$: {
			label : HotelName
		},
		tile: Array of TileXML
	}

A BoardXML is an Object with the following structure:
	{
		tile: Array of TileXML,
		hotel: Array of HotelXML
	}