// XMLTypeChecker
// ==============
// This file creates an "XMLTypeChecker" module which can be imported
// into other node.js scripts and instantiated.
//
// The purpose of this module is to verify that an object generated by
// xml2js actually matches one of our declared data types.
//
// THIS MODULE DOES NOT CHECK FOR VALID DATA, ONLY VALID OBJECT STRUCTURE.
// For example, this module will validate a properly-formed hotel called
// "Best Western," even though "Best Western" is an invalid hotel name
// in the game.  The Hotel class is responsible for verifying hotel names.
//
// See "Data Types.txt" for common data types.
//
// Example of code that might appear in acquire.js:
//
//	var XMLTypes = require('./XMLTypeChecker.js');
//  ...
module.exports = {

	// [public] BoardXML: Object -> Boolean
	// Verifies whether the provided object meets the criteria to
	// be a BoardXML piece.
	BoardXML: function(xml) {
		for (var i in xml._) {
			var keys = Object.keys(xml._[i]);
			for (var k in keys) {
				if (keys[k] != 'tile' && keys[k] != 'hotel') {
					return false;
				}
			}
		}
		if (xml.$) {
			return false;
		}
		return true;
	},
	
	// [public] TileXML: Object -> Boolean
	// Verifies whether the provided object meets the criteria to
	// be a TileXML piece.
	TileXML: function(xml) {
		var keys = Object.keys(xml.$);
		for (var i in keys) {
			if (keys[i] != 'row' && keys[i] != 'column') {
				return false;
			}
		}
		if (xml._) {
			return false;
		}
		return true;
	},
	
	// [public] HotelXML: Object -> Boolean
	// Verifies whether the provided object meets the criteria to
	// be a HotelXML piece.
	HotelXML: function(xml) {
		var keys = Object.keys(xml.$);
		for (var i in keys) {
			if (keys[i] != 'name') {
				return false;
			}
		}
		for (var i in xml._) {
			if (!xml._[i].tile) {
				return false;
			}
		}
		return true;
	},
	
	// [public] SetupXML: Object -> Boolean
	// Verifies whether the provided object meets the criteria
	// to be a "setup" tag
	SetupXML: function(xml) {
		var keys = Object.keys(xml.$);
		var player = 1;
		if (keys.length < 3 || keys.length > 6) {
			return false;
		}
		return true;
	},
	
	// [public] PlaceXML: Object -> Boolean
	// Verifies whether the provided object meets the criteria
	// to be a "place" tag
	PlaceXML: function(xml) {
		var keys = Object.keys(xml.$);
		if (keys.length > 3) {
		console.log("fail here 1");
			return false;
		}
		for (var i in keys) {
			if (keys[i] != 'row' && keys[i] != 'column' && keys[i] != 'hotel') {
				console.log("fail here 2")
				return false;
			}
		}
		if (keys.length == 2 || keys.length == 3) {
			return module.exports.StateXML(xml._[0].state);
		}
		else {
			console.log("fail here 4");
			return false;
		}
	},
	
	BuyXML: function(xml) {
		var keys = Object.keys(xml.$);
		if (keys.length > 3) {
			throw new Error('Provided XML is not a valid Buy tag');
		}
		var share = 1;
		for (var i in keys) {
			if (keys[i] == 'share' + share) {
				share++;
			}
			else {
				return false;
			}
		}
		return true;
	},
	
	DoneXML: function(xml) {
		if (xml.$) {
			return false;
		}
		return (xml._[0].state);
	},
	
	StateXML: function(xml) {
		var keys = Object.keys(xml._[0]);
		
		if (keys[0] != 'board') {
			return false;
		}
		
		return true;
	}
	
};